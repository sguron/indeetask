"""
Django settings for indeetask project.

Generated by 'django-admin startproject' using Django 1.9.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'vm+koorg_2-$3d#8scw+zt8wz+i!vyh41in9mfqg*jdos%!h-4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

VERSION = "0.1"

CORS_ALLOW_CREDENTIALS = True

CORS_ORIGIN_WHITELIST = (
    '127.0.0.1:8000', 'localhost:8000', '127.0.0.1:4200', 'localhost:4200',
)

CSRF_TRUSTED_ORIGINS = [
    "localhost", "127.0.0.1",
]

CORS_ORIGIN_ALLOW_ALL = True

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework.authtoken',
    'accounts.apps.AccountsConfig',
    'tasktracker.apps.TasktrackerConfig',
    'corsheaders',
    'bootstrapform',
    'rest_framework'
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'indeetask.urls'
LOGIN_URL = "/account/login/"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'indeetask.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

# defined in environment settings file


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = "/src/app/static"

# import and override settings based on runtime environment
# @info: Grab the Environment Variable and set for Application Environment (APP_ENV)
# @args: local = local_settings.py - Will be depreciated when we move everyone to docker.
# @args: docker = docker_settings.py
# @args: staging = staging_settings.py - Settings for running tests, and the staging server.
# @args: production = production_settings.py - Production setttings for Kubernetes.
# @default: docker
APP_ENV = os.environ.get('APP_ENV', 'local')

if APP_ENV == 'local':
    try:
        from .local_settings import *
    except ImportError as e:
        pass
elif APP_ENV == 'staging':
    try:
        from .staging_settings import *
    except ImportError as e:
        pass
elif APP_ENV == 'production':
    try:
        from .production_settings import *
    except ImportError as e:
        pass
elif APP_ENV == "":
    try:
        from .local_settings import *
    except ImportError as e:
        pass


#  locally the instance runs on sqlite
#  on staging it runs on a staging database that is wiped everytime a new version is pushed
#  on production it runs on production db which is migrated everytime a new version is pushed
#  for unit tests a test database is used which is wiped before and after use
#  note except staging all the mysql databases use ther same mysql instance